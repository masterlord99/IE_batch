cand = matrix(cand[1,],byrow = T,ncol=ncol(tmp),nrow=nrow(tmp))
out = tmp == cand
# out = apply(out,1,all)
out = rowSums(out)>(length(all)-1)
index = which(out)
n = n + length(index)
}
allow = c(allow,n)
pb$tick()
}
dict_table = dict_table[allow >50,]
dict_template = list(
ind = NA,
table = NA,
expected_values_long = list(),
sharpes_long = list(),
expected_values_short = list(),
sharpes_short = list(),
length = c()
)
create_dict = function(dict,data){
pb <- progress_bar$new(
format = "  Progress [:bar] :percent eta: :eta",
total = nrow(dict$table),
width = 60
)
for(i in 1:nrow(dict$table)){
cand = dict$table[i,]
mean_short = matrix(0,5,5)
sharpe_short = matrix(0,5,5)
mean_long = matrix(0,5,5)
sharpe_long = matrix(0,5,5)
n = 0
m = 0
for(j in 1:length(data)){
tmp = data[[j]][,dict$ind] %>% as.matrix()
cand = matrix(cand[1,],byrow = T,ncol=ncol(tmp),nrow=nrow(tmp))
out = tmp == cand
# out = apply(out,1,all)
out = rowSums(out)>=(length(dict$ind))
index = which(out)
if(length(index)>0){
n = n + length(index)
m = m + 1
cpp_ind = index - 1
cpp_thresh = data[[j]]$ATR[cpp_ind+1]/data[[j]]$Close[cpp_ind+1]
cpp_thresh = matrix(c(
cpp_thresh,
cpp_thresh*3,
cpp_thresh*5,
cpp_thresh*10,
cpp_thresh*100
),ncol = 5,nrow = length(cpp_thresh))
eval_long = get_expectations(
inds = cpp_ind,
ts = data[[j]]$Close,
thresh = cpp_thresh,
relative = T,
go_long = T,
n = 12*10*5
)
eval_short = get_expectations(
inds = cpp_ind,
ts = data[[j]]$Close,
thresh = cpp_thresh,
relative = T,
go_long = F,
n = 12*10*5
)
mean_short = mean_short + eval_short$mean
mean_long = mean_long + eval_long$mean
if(length(index)>10){
sharpe_short = sharpe_short + eval_short$sharpe
sharpe_long = sharpe_long + eval_long$sharpe
}
}
}
mean_long = mean_long/m
mean_short = mean_short/m
sharpe_long = sharpe_long/m
sharpe_short = sharpe_short/m
rownames(mean_long) = paste0("SL_",c(1,3,5,10,100))
colnames(mean_long) = paste0("TP_",c(1,3,5,10,100))
rownames(mean_short) = paste0("SL_",c(1,3,5,10,100))
colnames(mean_short) = paste0("TP_",c(1,3,5,10,100))
rownames(sharpe_long) = paste0("SL_",c(1,3,5,10,100))
colnames(sharpe_long) = paste0("TP_",c(1,3,5,10,100))
rownames(sharpe_short) = paste0("SL_",c(1,3,5,10,100))
colnames(sharpe_short) = paste0("TP_",c(1,3,5,10,100))
pb$tick()
dict$expected_values_long[[length(dict$expected_values_long)+1]] = mean_long
dict$expected_values_short[[length(dict$expected_values_short)+1]] = mean_short
dict$sharpes_long[[length(dict$sharpes_long)+1]] = sharpe_long
dict$sharpes_short[[length(dict$sharpes_short)+1]] = sharpe_short
dict$length = c(dict$length,n)
}
return(dict)
}
create_dict = function(dict,data){
pb <- progress_bar$new(
format = "  Progress [:bar] :percent eta: :eta",
total = nrow(dict$table),
width = 60
)
for(i in 1:nrow(dict$table)){
cand = dict$table[i,]
mean_short = matrix(0,5,5)
sharpe_short = matrix(0,5,5)
mean_long = matrix(0,5,5)
sharpe_long = matrix(0,5,5)
n = 0
m = 0
for(j in 1:length(data)){
tmp = data[[j]][,dict$ind] %>% as.matrix()
cand = matrix(cand[1,],byrow = T,ncol=ncol(tmp),nrow=nrow(tmp))
out = tmp == cand
# out = apply(out,1,all)
out = rowSums(out)>=(length(dict$ind))
index = which(out)
if(length(index)>0){
n = n + length(index)
m = m + 1
cpp_ind = index - 1
cpp_thresh = data[[j]]$ATR[cpp_ind+1]/data[[j]]$Close[cpp_ind+1]
cpp_thresh = matrix(c(
cpp_thresh,
cpp_thresh*3,
cpp_thresh*5,
cpp_thresh*10,
cpp_thresh*100
),ncol = 5,nrow = length(cpp_thresh))
eval_long = get_expectations(
inds = cpp_ind,
ts = data[[j]]$Close,
thresh = cpp_thresh,
relative = T,
go_long = T,
n = 4*10*5
)
eval_short = get_expectations(
inds = cpp_ind,
ts = data[[j]]$Close,
thresh = cpp_thresh,
relative = T,
go_long = F,
n = 4*10*5
)
mean_short = mean_short + eval_short$mean
mean_long = mean_long + eval_long$mean
if(length(index)>10){
sharpe_short = sharpe_short + eval_short$sharpe
sharpe_long = sharpe_long + eval_long$sharpe
}
}
}
mean_long = mean_long/m
mean_short = mean_short/m
sharpe_long = sharpe_long/m
sharpe_short = sharpe_short/m
rownames(mean_long) = paste0("SL_",c(1,3,5,10,100))
colnames(mean_long) = paste0("TP_",c(1,3,5,10,100))
rownames(mean_short) = paste0("SL_",c(1,3,5,10,100))
colnames(mean_short) = paste0("TP_",c(1,3,5,10,100))
rownames(sharpe_long) = paste0("SL_",c(1,3,5,10,100))
colnames(sharpe_long) = paste0("TP_",c(1,3,5,10,100))
rownames(sharpe_short) = paste0("SL_",c(1,3,5,10,100))
colnames(sharpe_short) = paste0("TP_",c(1,3,5,10,100))
pb$tick()
dict$expected_values_long[[length(dict$expected_values_long)+1]] = mean_long
dict$expected_values_short[[length(dict$expected_values_short)+1]] = mean_short
dict$sharpes_long[[length(dict$sharpes_long)+1]] = sharpe_long
dict$sharpes_short[[length(dict$sharpes_short)+1]] = sharpe_short
dict$length = c(dict$length,n)
}
return(dict)
}
dict_ = dict_template
dict_$ind = all
dict_$table = dict_table
system.time({
dict = create_dict(dict_,data)
})
saveRDS(dict,"long_dict.RDS")
dict = readRDS("long_dict.RDS")
sharpe_short = lapply(dict$sharpes_short,function(x)c(x)) %>% unlist() %>% ecdf
sharpe_long = lapply(dict$sharpes_long,function(x)c(x)) %>% unlist() %>% ecdf
dict$sharpes_long = lapply(dict$sharpes_long,function(x){
apply(x,2,sharpe_long)
})
dict$sharpes_short = lapply(dict$sharpes_short,function(x){
apply(x,2,sharpe_short)
})
dict$order = list(
long_ev = dict$expected_values_long %>% lapply(.,mean) %>% unlist(),
short_ev = dict$expected_values_short %>% lapply(.,mean) %>% unlist(),
long_sharpe = dict$sharpes_long %>% lapply(.,mean) %>% unlist(),
short_sharpe = dict$sharpes_short %>% lapply(.,mean) %>% unlist()
)
dict$table = as.matrix(dict$table)
saveRDS(dict,"final_dict.RDS")
source("C:/Users/jakob/Desktop/ProjectY/ECF/fixed_tp_sl/backtest.R", echo=TRUE)
dim(dict$table)
x = data$`ECF-Dec19_1m.csv`[1,]
x
source("C:/Users/jakob/Desktop/ProjectY/ECF/data/ta_data_ecf.R", echo=TRUE)
source("C:/Users/jakob/Desktop/ProjectY/ECF/fixed_tp_sl/space.R", echo=TRUE)
source("C:/Users/jakob/Desktop/ProjectY/ECF/fixed_tp_sl/backtest.R", echo=TRUE)
source("C:/Users/jakob/Desktop/ProjectY/ECF/fixed_tp_sl/space.R", echo=TRUE)
source("C:/Users/jakob/Desktop/ProjectY/ECF/fixed_tp_sl/backtest.R", echo=TRUE)
source("C:/Users/jakob/Desktop/ProjectY/ECF/fixed_tp_sl/space.R", echo=TRUE)
source("C:/Users/jakob/Desktop/ProjectY/ECF/fixed_tp_sl/backtest.R", echo=TRUE)
source("C:/Users/jakob/Desktop/ProjectY/ECF/fixed_tp_sl/backtest.R", echo=TRUE)
source("C:/Users/jakob/Desktop/ProjectY/ECF/fixed_tp_sl/space.R", echo=TRUE)
source("C:/Users/jakob/Desktop/ProjectY/ECF/fixed_tp_sl/backtest.R", echo=TRUE)
source("C:/Users/jakob/Desktop/ProjectY/ECF/fixed_tp_sl/backtest.R", echo=TRUE)
source("C:/Users/jakob/Desktop/ProjectY/ECF/fixed_tp_sl/space.R", echo=TRUE)
source("C:/Users/jakob/Desktop/ProjectY/ECF/fixed_tp_sl/backtest.R", echo=TRUE)
source("C:/Users/jakob/Desktop/ProjectY/ECF/fixed_tp_sl/backtest.R", echo=TRUE)
source("C:/Users/jakob/Desktop/ProjectY/ECF/fixed_tp_sl/backtest.R", echo=TRUE)
source("C:/Users/jakob/Desktop/ProjectY/ECF/fixed_tp_sl/backtest.R", echo=TRUE)
source("C:/Users/jakob/Desktop/ProjectY/ECF/fixed_tp_sl/space.R", echo=TRUE)
source("C:/Users/jakob/Desktop/ProjectY/ECF/fixed_tp_sl/backtest.R", echo=TRUE)
source("C:/Users/jakob/Desktop/ProjectY/ECF/fixed_tp_sl/backtest.R", echo=TRUE)
source("C:/Users/jakob/Desktop/ProjectY/ECF/fixed_tp_sl/backtest.R", echo=TRUE)
setwd("C:/Users/jakob/Desktop/ProjectY/ECF/prod_lib")
source("R_library.R")
source("R_library.R")
Rcpp::sourceCpp("Cpp_lib.cpp")
## read data
data = readRDS("ECF.RDS")
data = lapply(data,TA)
source("C:/Users/jakob/Desktop/ProjectY/ECF/prod_lib/create_space_and_backtest.R", echo=TRUE)
long_dict = lapply(1:nrow(dict$table),select_long)
dict_ = dict_template
dict_$ind = all
dict_$table = dict_table
system.time({
dict = create_dict(dict_,data)
})
sharpe_short = lapply(dict$sharpes_short,function(x)c(x)) %>% unlist() %>% ecdf
sharpe_long = lapply(dict$sharpes_long,function(x)c(x)) %>% unlist() %>% ecdf
dict$sharpes_long = lapply(dict$sharpes_long,function(x){
apply(x,2,sharpe_long)
})
dict$sharpes_short = lapply(dict$sharpes_short,function(x){
apply(x,2,sharpe_short)
})
dict$order = list(
long_ev = dict$expected_values_long %>% lapply(.,mean) %>% unlist(),
short_ev = dict$expected_values_short %>% lapply(.,mean) %>% unlist(),
long_sharpe = dict$sharpes_long %>% lapply(.,mean) %>% unlist(),
short_sharpe = dict$sharpes_short %>% lapply(.,mean) %>% unlist()
)
dict$table = as.matrix(dict$table)
saveRDS(dict,"final_dict.RDS")
long_dict = lapply(1:nrow(dict$table),select_long)
short_dict = lapply(1:nrow(dict$table),select_short)
min_ev_long = quantile(dict$order$long_ev,0.75)
min_ev_short = quantile(dict$order$short_ev,0.66)
min_sharpe_long = 0.2
min_sharpe_short = 0.2
sh_mul_long = 0.1
sh_mul_short = 0.1
cd = 4
max_ = 5
lev = 0.003
long_dict = lapply(1:nrow(dict$table),select_long)
short_dict = lapply(1:nrow(dict$table),select_short)
bt = eval()
mini_eval(bt,data,1)
visualize_eval(bt,data)
plot_expectations = function(d,i){
n = d$expected_values_long[[i]] %>% ncol()
n1 = d$expected_values_long[[i]] %>% nrow()
cn = colnames(d$expected_values_long[[i]])
rn = rownames(d$expected_values_long[[i]])
rn = gsub(rn,pattern="SL_",replacement="") %>% as.numeric()
cn = gsub(cn,pattern="TP_",replacement="") %>% as.numeric()
sl = c()
tp = c()
el = c()
es = c()
sl_ = c()
ss = c()
for(i1 in 1:n){
for(j1 in 1:n1){
tp = c(tp,cn[i1])
sl = c(sl,rn[j1])
el = c(el,d$expected_values_long[[i]][j1,i1])
es = c(es,d$expected_values_short[[i]][j1,i1])
sl_ = c(sl_,d$sharpes_long[[i]][j1,i1])
ss = c(ss,d$sharpes_short[[i]][j1,i1])
}
}
data = data.frame(SL =sl %>% as.factor(),
TP = tp %>% as.factor(),
Expectations_long=el*100,
Expectations_short=es*100,
Sharpe_long = sl_,
Sharpe_short=ss
)
theme_set(theme_classic())
kayle_multiplot(
ggplot(data, aes(x = SL, y = TP)) +
geom_tile(aes(fill=round(Expectations_long,2)),colour="black",linetype="dotted",linewidth=0.25) +
geom_text(aes(label = round(Expectations_long, 2))) +
scale_fill_gradient2(name = "Long EV (%)",
low="red", high="darkgreen", #colors in the scale
breaks=seq(min(data$Expectations_long),max(data$Expectations_long),length.out=10) %>% round(.,2),
midpoint=0)+
ylab("Take Profit (H ATR)") + xlab("Stop Loss (H ATR)") + ggtitle(paste0("Total (%) won [X before losing Y] ~~~ number of trades = ",d$length[i]))
,
ggplot(data, aes(x = SL, y = TP)) +
geom_tile(aes(fill=round(Expectations_short,2)),colour="black",linetype="dotted",linewidth=0.25) +
geom_text(aes(label = round(Expectations_short, 2))) +
scale_fill_gradient2(name = "Short EV (%)",
low="red", high="darkgreen", #colors in the scale
breaks=seq(min(data$Expectations_short),max(data$Expectations_short),length.out=10) %>% round(.,2),
midpoint=0)+
ylab("Take Profit (H ATR)") + xlab("Stop Loss (H ATR)") + ggtitle(paste0("Total (%) won [X before losing Y] ~~~ number of trades = ",d$length[i]))
,
ggplot(data, aes(x = SL, y = TP)) +
geom_tile(aes(fill=round(Sharpe_long,2)),colour="black",linetype="dotted",linewidth=0.25) +
geom_text(aes(label = round(Sharpe_long, 2))) +
scale_fill_gradient2(name = "Long Sharpe",
low="red", high="darkgreen", #colors in the scale
breaks=seq(min(data$Sharpe_long),max(data$Sharpe_long),length.out=10) %>% round(.,2),
midpoint=0.5)+
ylab("Take Profit (H ATR)") + xlab("Stop Loss (H ATR)") + ggtitle(paste0("Long Sharpes ~~~ number of trades = ",d$length[i]))
,
ggplot(data, aes(x = SL, y = TP)) +
geom_tile(aes(fill=round(Sharpe_short,2)),colour="black",linetype="dotted",linewidth=0.25) +
geom_text(aes(label = round(Sharpe_short, 2))) +
scale_fill_gradient2(name = "Short Sharpe",
low="red", high="darkgreen", #colors in the scale
breaks=seq(min(data$Sharpe_short),max(data$Sharpe_short),length.out=10) %>% round(.,2),
midpoint=0.5)+
ylab("Take Profit (H ATR)") + xlab("Stop Loss (H ATR)") + ggtitle(paste0("Short Sharpes ~~~ number of trades = ",d$length[i]))
,
cols=2
)
}
plot_expectations(dict,1)
source("C:/Users/jakob/Desktop/ProjectY/ECF/prod_lib/R_library.R", echo=TRUE)
plot_expectations(dict,1)
# plot_expectations(dict,1)
saveRDS(bt,"backtest.RDS")
source("C:/Users/jakob/Desktop/ProjectY/ECF/prod_lib/run_pipeline.R", echo=TRUE)
dict = readRDS("final_dict.RDS")
source("R_library.R")
Rcpp::sourceCpp("Cpp_lib.cpp")
all = 1:15
n_max_dict = 50
## read data
data = readRDS("ECF.RDS")
## apply TA
data = lapply(data,TA)
## create space
## test sharpe
data = lapply(data,na.omit)
# data = lapply(data,function(x)x[c(T,rep(F,11)),])
# data = data[c(1,3,6)] ## last 2 are out of sample for this test
# data = lapply(data,function(x)x[c(T,rep(F,11)),])
# data = data[c(1,3,6)] ## last 2 are out of sample for this test
saveRDS(data,"TA.RDS")
# data = lapply(data,function(x)x[c(T,rep(F,11)),])
# data = data[c(1,3,6)] ## last 2 are out of sample for this test
saveRDS(data,"TA.RDS")
head(data$`ECF-Dec19_1m.csv`)
# data = lapply(data,function(x)x[c(T,rep(F,11)),])
# data = data[c(1,3,6)] ## last 2 are out of sample for this test
saveRDS(object = data,file = "TA.RDS")
# data = lapply(data,function(x)x[c(T,rep(F,11)),])
# data = data[c(1,3,6)] ## last 2 are out of sample for this test
saveRDS(object = data,file = "TA.RDS")
readRDS("TA.RDS")
## read data
data = readRDS("ECF.RDS")
tail(data$`ECF-Dec23_1m.csv`)
write.csv(tail(data$`ECF-Dec24_1m.csv`,500),"tmp.csv",row.names = F)
running = read.csv("tmp.csv")
source("R_library.R")
dict = readRDS("final_dict.RDS")
### readcsv from predetermined space!
running = read.csv("tmp.csv")
running = TA(running)
## read data
data = readRDS("ECF.RDS")
write.csv(tail(data$`ECF-Dec24_1m.csv`,1000),"tmp.csv",row.names = F)
running = read.csv("tmp.csv")
running = TA(running)
running = tail(running,10)
running
last = tail(running,1)
## run backtest and save
## params
min_ev_long = quantile(dict$order$long_ev,0.75)
min_ev_short = quantile(dict$order$short_ev,0.66)
min_sharpe_long = 0.2
min_sharpe_short = 0.2
sh_mul_long = 0.1
sh_mul_short = 0.1
cd = 0
max_ = 5
lev = 0.003
long_dict = lapply(1:nrow(dict$table),select_long)
short_dict = lapply(1:nrow(dict$table),select_short)
bt = eval()
source("C:/Users/jakob/Desktop/ProjectY/ECF/prod_lib/create_space_and_backtest.R", echo=TRUE)
source("C:/Users/jakob/Desktop/ProjectY/ECF/prod_lib/create_space_and_backtest.R", echo=TRUE)
source("C:/Users/jakob/Desktop/ProjectY/ECF/prod_lib/create_space_and_backtest.R", echo=TRUE)
min_ev_long = quantile(dict$order$long_ev,0.5)
min_ev_short = quantile(dict$order$short_ev,0.5)
min_sharpe_long = 0.2
min_sharpe_short = 0.2
sh_mul_long = 0.1
sh_mul_short = 0.1
cd = 0
max_ = 5
lev = 0.003
long_dict = lapply(1:nrow(dict$table),select_long)
short_dict = lapply(1:nrow(dict$table),select_short)
bt = eval()
# mini_eval(bt,data,1)
visualize_eval(bt,data)
# plot_expectations(dict,1)
saveRDS(bt,"backtest.RDS")
min_ev_long = quantile(dict$order$long_ev,0.5)
min_ev_short = quantile(dict$order$short_ev,0.5)
min_sharpe_long = 0.2
min_sharpe_short = 0.2
sh_mul_long = 0.1
sh_mul_short = 0.1
cd = 4
max_ = 5
lev = 0.003
long_dict = lapply(1:nrow(dict$table),select_long)
short_dict = lapply(1:nrow(dict$table),select_short)
bt = eval()
# mini_eval(bt,data,1)
visualize_eval(bt,data)
# plot_expectations(dict,1)
saveRDS(bt,"backtest.RDS")
source("C:/Users/jakob/Desktop/ProjectY/ECF/prod_lib/create_space_and_backtest.R", echo=TRUE)
read_dict(last)
read_dict(last)
dict$table[108,]
last
index = read_dict(last)
select_long(index)
select_short(index)
dict$expected_values_long[[index]]
dict$expected_values_short[[index]]
min_ev_long = quantile(dict$order$long_ev,0.66)
min_ev_short = quantile(dict$order$short_ev,0.66)
min_sharpe_long = 0.2
min_sharpe_short = 0.2
sh_mul_long = 1
sh_mul_short = 1
cd = 4
max_ = 4
lev = 0.003
index = read_dict(last)
select_long(index)
select_short(index)
dict$expected_values_long[[index]]
dict$expected_values_short[[index]]
max_
source("C:/Users/jakob/Desktop/ProjectY/ECF/prod_lib/run_pipeline.R", echo=TRUE)
max_
select_short()
select_short()
select_short(1)
select_short(index)
select_short
dict$expected_values_short[[index]]
select_short(index)
select_long(index)
running
last
saveRDS(to_json,"app_data.RDS")
to_json = list(
long = long_trade,
short = short_trade,
min_long_ev = min_ev_long,
min_short_ev = min_ev_short,
index = index
)
saveRDS(to_json,"app_data.RDS")
index = read_dict(last)
long_trade = select_long(index)
short_trade = select_short(index)
to_json = list(
long = long_trade,
short = short_trade,
min_long_ev = min_ev_long,
min_short_ev = min_ev_short,
index = index
)
saveRDS(to_json,"app_data.RDS")
source("C:/Users/jakob/Desktop/ProjectY/ECF/prod_lib/run_pipeline.R", echo=TRUE)
source("C:/Users/jakob/Desktop/ProjectY/ECF/prod_lib/run_pipeline.R", echo=TRUE)
plot_expectations(dict,1)
plot_expectations(dict,2)
plot_expectations(dict,3)
plot_expectations(dict,4)
plot_expectations(dict,5)
plot_expectations(dict,6)
for(i in 6:nrow(dict$table)){
plot_expectations(dict,i)
readline(":")
}
